name: CICD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3  #github actions의 탬플릿(자동으로 pull받음)
      - name: Install JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Gradle
        run: |
          mkdir -p ./src/main/resources
          echo ${{ secrets.APPLICATION }} | base64 --decode > ./src/main/resources/application.yml
          echo ${{ secrets.APPLICATION_SECRET }} | base64 --decode > ./src/main/resources/application-secret.yml
          echo ${{ secrets.APPLICATION_COMMON }} | base64 --decode > ./src/main/resources/application-common.yml
          echo ${{ secrets.APPLICATION_BLUE }} | base64 --decode > ./src/main/resources/application-blue.yml
          echo ${{ secrets.APPLICATION_GREEN }} | base64 --decode > ./src/main/resources/application-green.yml
          echo ${{ secrets.APPLICATION_LOCAL }} | base64 --decode > ./src/main/resources/application-local.yml
          chmod 777 ./gradlew
          ./gradlew clean build -x test  #jar파일 생성

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker
        run: docker build --platform linux/amd64 -t ${{ secrets.DOCKERHUB_USERNAME }}/photoground_server .
      - name: Push Docker
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/photoground_server:latest
        
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Set target IP  #현재 실행되고 있는애가 blue인지 green인지 확인 (blue면 green으로 바꿔주고, green이면 blue로 바꿔줘야함)
        run: |
          STATUS=$(curl -o /dev/null -w "%{http_code}" "http://${{ secrets.PHOTOGROUND_SERVER_IP }}/env")
          echo $STATUS
          if [ $STATUS = 200 ]; then
            CURRENT_UPSTREAM=$(curl -s "http://${{ secrets.PHOTOGROUND_SERVER_IP }}/env")  
          else
            CURRENT_UPSTREAM=green
          fi
          echo CURRENT_UPSTREAM=$CURRENT_UPSTREAM >> $GITHUB_ENV  #githubactions에 담은 전역변수
          if [ $CURRENT_UPSTREAM = blue ]; then
            echo "CURRENT_PORT=8080" >> $GITHUB_ENV
            echo "STOPPED_PORT=8081" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=green" >> $GITHUB_ENV
          else
            echo "CURRENT_PORT=8081" >> $GITHUB_ENV
            echo "STOPPED_PORT=8080" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=blue" >> $GITHUB_ENV
          fi
          
      - name: Docker compose  #ec2로 이동해서 ec2에 접속
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.PHOTOGROUND_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/photoground_server:latest
            sudo docker-compose -f docker-compose-${{env.TARGET_UPSTREAM}}.yml up -d
      
      - name: Check deploy server URL   #스프링부트 서버가 완전히 켜져야 nginx가 blue->green으로 바꿔줌. 따라서 green이 정상적으로 돌아가는지 health check필요
        uses: jtalk/url-health-check-action@v3
        with:
          url: http://${{ secrets.PHOTOGROUND_SERVER_IP }}:${{env.STOPPED_PORT}}/env
          max-attempts: 5
          retry-delay: 10s

      - name: Change nginx upstream
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.PHOTOGROUND_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            sudo docker exec -i nginxserver bash -c 'echo "set \$service_url ${{ env.TARGET_UPSTREAM }};" > /etc/nginx/conf.d/service-env.inc && nginx -s reload' 

      - name: Stop current server
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.PHOTOGROUND_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            sudo docker stop ${{env.CURRENT_UPSTREAM}}
            sudo docker rm ${{env.CURRENT_UPSTREAM}}
